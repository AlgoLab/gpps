'''

   experiments for gpps ...

'''

# root of current git repo
import git
git_repo = git.Repo(search_parent_directories=True)
git_root = git_repo.git.rev_parse("--show-toplevel")

# programs
_ilp_ = git_root + '/gpps_ilp.py'
_hc_ = git_root + '/gpps_hc.py'

# memory and runtime
memlimit = 64 * 1024 * 1024 # 64GB memory limit (in KB)
time = '/usr/bin/time'

# parameters
paths = [git_root + '/data/real']
files = ['gawad4']
cutoffs = [61200] # (17 hours) -- [86400] # 24 * 3600 (24 hours)
maxdels = [2,3,5]
nss = [100, 500]
mis = [50, 500]

# patterns
file_pattern = '{file,[-\w_]+}'
kab_pattern = 'k{kappa,[0-9]+}-a{alpha,[0-9]+(|.[0-9]+)}-b{beta,[0-9]+(|.[0-9]+)}'
ilp_pattern = 'ilp-' + kab_pattern + '-c{cutoff,[0-9]+}-d{maxdel,[0-9]}'
hc_pattern = 'hc-' + kab_pattern + '-c{cutoff,[0-9]+}-d{maxdel,[0-9]}-ns{ns,[0-9]+}-mi{mi,[0-9]+}'

#
# group parameters with list-defining functions
#----------------------------------------------------------------------

# kappa, alpha, beta
def kabs(kappas_, alphas_, betas_) :
        return ['k{}-a{}-b{}'.format(kappa_, alpha_, beta_)
                for kappa_ in kappas_
                for alpha_ in alphas_
                for beta_ in betas_]

#
# master rule
#----------------------------------------------------------------------
rule master :
	input :
		expand('{path}/{file}.txt.hc-{kab}-c{cutoff}-d{maxdel}-ns{ns}-mi{mi}/.out',
			path = paths, file = files,
			kab = kabs([1], [0.3], [0.0001]),
			cutoff = cutoffs, maxdel = maxdels,
			ns = nss, mi = mis)

#
# run gpps
#----------------------------------------------------------------------
rule run_ilp :
	input :
		prgm = _ilp_,
		matrix = '{path}/{file}.txt'

	output : '{path}/'+file_pattern+'.txt.'+ilp_pattern+'/{file}.ilp.extended.out'

	log :
		dir = '{path}/{file}.txt.' + ilp_pattern + '/',
		log = '{path}/{file}.txt.' + ilp_pattern + '/log',
		time = '{path}/{file}.txt.' + ilp_pattern + '/time',

	shell : '''

   ulimit -Sv {memlimit}
   {time} -v -o {log.time} \
      python {input.prgm} -f {input.matrix} \
         -k {wildcards.kappa} -a {wildcards.alpha} -b {wildcards.beta} \
         -t {wildcards.cutoff} -d {wildcards.maxdel} \
         -o {log.dir} > {log.log} 2>&1 '''

# run the hill-climbing
rule run_hc :
	input :
		prgm = _hc_,
		ilp_out = '{path}/{file}.txt.'+ilp_pattern+'/{file}.ilp.extended.out',
		matrix = '{path}/{file}.txt',
		names = '{path}/{file}_mutations.txt'

	output : '{path}/' + file_pattern + '.txt.' + hc_pattern + '/.out'

	log :
		dir = '{path}/{file}.txt.' + hc_pattern + '/',
		log = '{path}/{file}.txt.' + hc_pattern + '/log',
		time = '{path}/{file}.txt.' + hc_pattern + '/time'

	shell : '''

   cd ..
   ulimit -Sv {memlimit}
   {time} -v -o {log.time} \
      python hill_climbing.py -i {input.ilp_out} -s {input.matrix} \
         -k {wildcards.kappa} -a {wildcards.alpha} -b {wildcards.beta} \
         --ns {wildcards.ns} --mi {wildcards.mi} --names {input.names} \
         -o {log.dir} > {log.log} 2>&1
   touch {output} '''
